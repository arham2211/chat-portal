{
  "testSnippet": {
    "prefix": "test",
    "body": ["print('Hello, Snippet!')"],
    "description": "Test snippet"
	},
	"bfs": {
		"prefix": "bfs",
		"body": [
			"class GoalBasedAgent:\r",
			"    def __init__(self, goal):\r",
			"        self.goal = goal\r",
			"\r",
			"    def formulate_goal(self, percept):\r",
			"        if percept == self.goal:\r",
			"            return \"Goal reached\"\r",
			"        return \"Searching\"\r",
			"\r",
			"    def bfs_search(self, graph, start, goal):\r",
			"        visited = []\r",
			"        queue = []\r",
			"        visited.append(start)\r",
			"        queue.append(start)\r",
			"\r",
			"        while queue:\r",
			"            node = queue.pop(0)\r",
			"            print(f\"Visiting: {node}\")\r",
			"            if node == goal:\r",
			"                return f\"Goal {goal} found!\"\r",
			"            for neighbour in graph.get(node, []):\r",
			"                if neighbour not in visited:\r",
			"                    visited.append(neighbour)\r",
			"                    queue.append(neighbour)\r",
			"\r",
			"        return \"Goal not found\"\r",
			"\r",
			"    def act(self, percept, graph):\r",
			"        goal_status = self.formulate_goal(percept)\r",
			"        if goal_status == \"Goal reached\":\r",
			"            return f\"Goal {self.goal} found!\"\r",
			"        else:\r",
			"            return self.bfs_search(graph, percept, self.goal)\r",
			"\r",
			"\r",
			"class Environment:\r",
			"    def __init__(self, graph):\r",
			"        self.graph = graph\r",
			"\r",
			"    def get_percept(self, node):\r",
			"        return node\r",
			"\r",
			"\r",
			"def run_agent(agent, environment, start_node):\r",
			"    percept = environment.get_percept(start_node)\r",
			"    action = agent.act(percept, environment.graph)\r",
			"    print(action)\r",
			"\r",
			"\r",
			"\r",
			"tree = {\r",
			"    'A': ['B', 'C'],\r",
			"    'B': ['D', 'E'],\r",
			"    'C': ['F', 'G'],\r",
			"    'D': ['H'],\r",
			"    'E': [],\r",
			"    'F': ['I'],\r",
			"    'G': [],\r",
			"    'H': [],\r",
			"    'I': []\r",
			"}\r",
			"\r",
			"start_node = 'A'\r",
			"goal_node = 'I'\r",
			"\r",
			"agent = GoalBasedAgent(goal_node)\r",
			"environment = Environment(tree)\r",
			"\r",
			"run_agent(agent, environment, start_node)"
		],
		"description": "description for bfs"
	},
	"dfs": {
		"prefix": "dfs",
		"body": [
			"class GoalBasedAgent:\r",
			"    def __init__(self, goal):\r",
			"        self.goal = goal\r",
			"\r",
			"    def formulate_goal(self, percept):\r",
			"        if percept == self.goal:\r",
			"            return \"Goal reached\"\r",
			"        return \"Searching\"\r",
			"\r",
			"    def dfs_search(self, graph, start, goal):\r",
			"        visited = []\r",
			"        stack = []\r",
			"        visited.append(start)\r",
			"        stack.append(start)\r",
			"\r",
			"        while stack:\r",
			"            node = stack.pop()\r",
			"            print(f\"Visiting: {node}\")\r",
			"            if node == goal:\r",
			"                return f\"Goal {goal} found!\"\r",
			"\r",
			"            for neighbour in reversed(graph.get(node, [])):\r",
			"                if neighbour not in visited:\r",
			"                    visited.append(neighbour)\r",
			"                    stack.append(neighbour)\r",
			"\r",
			"        return \"Goal not found\"\r",
			"\r",
			"    def act(self, percept, graph):\r",
			"        goal_status = self.formulate_goal(percept)\r",
			"        if goal_status == \"Goal reached\":\r",
			"            return f\"Goal {self.goal} found!\"\r",
			"        else:\r",
			"            return self.dfs_search(graph, percept, self.goal)\r",
			"\r",
			"\r",
			"class Environment:\r",
			"    def __init__(self, graph):\r",
			"        self.graph = graph\r",
			"\r",
			"    def get_percept(self, node):\r",
			"        return node\r",
			"\r",
			"\r",
			"def run_agent(agent, environment, start_node):\r",
			"    percept = environment.get_percept(start_node)\r",
			"    action = agent.act(percept, environment.graph)\r",
			"    print(action)\r",
			"\r",
			"\r",
			"tree = {\r",
			"    'A': ['B', 'C'],\r",
			"    'B': ['D', 'E'],\r",
			"    'C': ['F', 'G'],\r",
			"    'D': ['H'],\r",
			"    'E': [],\r",
			"    'F': ['I'],\r",
			"    'G': [],\r",
			"    'H': [],\r",
			"    'I': []\r",
			"}\r",
			"\r",
			"start_node = 'A'\r",
			"goal_node = 'I'\r",
			"\r",
			"agent = GoalBasedAgent(goal_node)\r",
			"environment = Environment(tree)\r",
			"\r",
			"run_agent(agent, environment, start_node)"
		],
		"description": "description for dfs"
	},
	"dls": {
		"prefix": "dls",
		"body": [
			"def dls(graph, start, goal, depth_limit):\r",
			"    visited = []\r",
			"    stack = []\r",
			"    visited.append(start)\r",
			"    stack.append((start, 0))\r",
			"\r",
			"    while stack:\r",
			"        node, depth = stack.pop()\r",
			"        print(node, end=\" \")\r",
			"\r",
			"        if node == goal:\r",
			"            print(\"\\nGoal found!\")\r",
			"            return True\r",
			"\r",
			"        if depth < depth_limit:\r",
			"            for neighbour in reversed(graph.get(node, [])):\r",
			"                if neighbour not in visited:\r",
			"                    visited.append(neighbour)\r",
			"                    stack.append((neighbour, depth + 1))\r",
			"\r",
			"    return False\r",
			"\r",
			"\r",
			"class GoalBasedAgent:\r",
			"    def __init__(self, goal, depth_limit):\r",
			"        self.goal = goal\r",
			"        self.depth_limit = depth_limit\r",
			"\r",
			"    def formulate_goal(self, percept):\r",
			"        if percept == self.goal:\r",
			"            return \"Goal reached\"\r",
			"        return \"Searching\"\r",
			"\r",
			"    def dls_search(self, graph, start, goal, depth_limit):\r",
			"        visited = []\r",
			"        stack = []\r",
			"        visited.append(start)\r",
			"        stack.append((start, 0))\r",
			"\r",
			"        while stack:\r",
			"            node, depth = stack.pop()\r",
			"            print(f\"Visiting: {node}, Depth: {depth}\")\r",
			"            if node == goal:\r",
			"                return f\"Goal {goal} found!\"\r",
			"\r",
			"            if depth < depth_limit:\r",
			"                for neighbour in reversed(graph.get(node, [])):\r",
			"                    if neighbour not in visited:\r",
			"                        visited.append(neighbour)\r",
			"                        stack.append((neighbour, depth + 1))\r",
			"\r",
			"        return \"Goal not found\"\r",
			"\r",
			"    def act(self, percept, graph):\r",
			"        goal_status = self.formulate_goal(percept)\r",
			"        if goal_status == \"Goal reached\":\r",
			"            return f\"Goal {self.goal} found!\"\r",
			"        else:\r",
			"            return self.dls_search(graph, percept, self.goal, self.depth_limit)\r",
			"\r",
			"\r",
			"class Environment:\r",
			"    def __init__(self, graph):\r",
			"        self.graph = graph\r",
			"\r",
			"    def get_percept(self, node):\r",
			"        return node\r",
			"\r",
			"\r",
			"def run_agent(agent, environment, start_node):\r",
			"    percept = environment.get_percept(start_node)\r",
			"    action = agent.act(percept, environment.graph)\r",
			"    print(action)\r",
			"\r",
			"\r",
			"tree = {\r",
			"    'A': ['B', 'C'],\r",
			"    'B': ['D', 'E'],\r",
			"    'C': ['F', 'G'],\r",
			"    'D': ['H'],\r",
			"    'E': [],\r",
			"    'F': ['I'],\r",
			"    'G': [],\r",
			"    'H': [],\r",
			"    'I': []\r",
			"}\r",
			"\r",
			"start_node = 'A'\r",
			"goal_node = 'I'\r",
			"depth_limit = 3\r",
			"\r",
			"\r",
			"agent = GoalBasedAgent(goal_node, depth_limit)\r",
			"environment = Environment(tree)\r",
			"\r",
			"\r",
			"run_agent(agent, environment, start_node)\r",
			""
		],
		"description": "description for dls"
	},
	"ucs": {
		"prefix": "ucs",
		"body": [
			"import heapq\r",
			"\r",
			"def ucs(graph, start, goal, costs):\r",
			"    visited = {}\r",
			"    priority_queue = []\r",
			"    heapq.heappush(priority_queue, (0, start))\r",
			"    visited[start] =\r",
			"\r",
			"    while priority_queue:\r",
			"        current_cost, node = heapq.heappop(priority_queue)\r",
			"        print(f\"Visiting: {node}, Current Cost: {current_cost}\")\r",
			"\r",
			"        if node == goal:\r",
			"            print(\"\\nGoal found!\")\r",
			"            return current_cost\r",
			"\r",
			"        for neighbour in graph.get(node, []):\r",
			"            new_cost = current_cost + costs.get((node, neighbour), float('inf'))\r",
			"\r",
			"            if neighbour not in visited or new_cost < visited[neighbour]:\r",
			"                visited[neighbour] = new_cost\r",
			"                heapq.heappush(priority_queue, (new_cost, neighbour))\r",
			"\r",
			"    return \"Goal not found\"\r",
			"\r",
			"class GoalBasedAgent:\r",
			"    def __init__(self, goal):\r",
			"        self.goal = goal\r",
			"\r",
			"    def formulate_goal(self, percept):\r",
			"        if percept == self.goal:\r",
			"            return \"Goal reached\"\r",
			"        return \"Searching\"\r",
			"\r",
			"    def ucs_search(self, graph, start, goal, costs):\r",
			"        return ucs(graph, start, goal, costs)\r",
			"\r",
			"    def act(self, percept, graph, costs):\r",
			"        goal_status = self.formulate_goal(percept)\r",
			"        if goal_status == \"Goal reached\":\r",
			"            return f\"Goal {self.goal} found!\"\r",
			"        else:\r",
			"            return self.ucs_search(graph, percept, self.goal, costs)\r",
			"\r",
			"class Environment:\r",
			"    def __init__(self, graph):\r",
			"        self.graph = graph\r",
			"\r",
			"    def get_percept(self, node):\r",
			"        return node\r",
			"\r",
			"\r",
			"def run_agent(agent, environment, start_node, costs):\r",
			"    percept = environment.get_percept(start_node)\r",
			"    action = agent.act(percept, environment.graph, costs)\r",
			"    print(action)\r",
			"\r",
			"\r",
			"graph = {\r",
			"    'A': ['B', 'C'],\r",
			"    'B': ['D', 'E'],\r",
			"    'C': ['F', 'G'],\r",
			"    'D': ['H'],\r",
			"    'E': [],\r",
			"    'F': ['I'],\r",
			"    'G': [],\r",
			"    'H': [],\r",
			"    'I': []\r",
			"}\r",
			"costs = {\r",
			"    ('A', 'B'): 1,\r",
			"    ('A', 'C'): 4,\r",
			"    ('B', 'D'): 2,\r",
			"    ('B', 'E'): 5,\r",
			"    ('C', 'F'): 3,\r",
			"    ('C', 'G'): 2,\r",
			"    ('D', 'H'): 6,\r",
			"    ('F', 'I'): 1,\r",
			"}\r",
			"start_node = 'A'\r",
			"goal_node = 'I'\r",
			"\r",
			"agent = GoalBasedAgent(goal_node)\r",
			"environment = Environment(graph)\r",
			"\r",
			"# Run the agent with UCS\r",
			"run_agent(agent, environment, start_node, costs)\r",
			"\r",
			""
		],
		"description": "description for ucs"
	},
	"id": {
		"prefix": "id",
		"body": [
			"class Agent:\r",
			"    def __init__(self, graph):\r",
			"        self.graph = graph\r",
			"\r",
			"    def dls(self, node, goal, depth, path):\r",
			"        if depth < 0:\r",
			"            return False\r",
			"        path.append(node)\r",
			"\r",
			"        if node == goal:\r",
			"            return True\r",
			"\r",
			"        for neighbor in self.graph.get(node, {}):\r",
			"            if self.dls(neighbor, goal, depth - 1, path):\r",
			"                return True\r",
			"\r",
			"        path.pop()\r",
			"        return False\r",
			"\r",
			"    def iterative_deepening(self, start, goal, max_depth):\r",
			"        for depth in range(max_depth + 1):\r",
			"            print(f\"Depth: {depth}\")\r",
			"            path = []\r",
			"            if self.dls(start, goal, depth, path):\r",
			"                print(\"\\nPath to goal:\", \" → \".join(path))\r",
			"                return\r",
			"        print(\"Goal not found within depth limit.\")\r",
			"\r",
			"graph = {\r",
			"    'A': {'B': 2, 'C': 1},\r",
			"    'B': {'D': 4, 'E': 3},\r",
			"    'C': {'F': 1, 'G': 5},\r",
			"    'D': {'H': 2},\r",
			"    'E': {},\r",
			"    'F': {'I': 6},\r",
			"    'G': {},\r",
			"    'H': {},\r",
			"    'I': {}\r",
			"}\r",
			"\r",
			"agent = Agent(graph)\r",
			"start_node = 'A'\r",
			"goal_node = 'I'\r",
			"max_search_depth = 5\r",
			"\r",
			"agent.iterative_deepening(start_node, goal_node, max_search_depth)\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			""
		],
		"description": "description for id"
	},
	"mazebfs": {
		"prefix": "mazebfs",
		"body": [
			"maze = [\r",
			"    [1, 1, 0],\r",
			"    [1, 1, 0],\r",
			"    [0, 1, 1]\r",
			"]\r",
			"# Directions for movement (right and down)\r",
			"directions = [(0, 1), (1, 0)]  # (row, col)\r",
			"\r",
			"# Convert maze to a graph (adjacency list representation)\r",
			"def create_graph(maze):\r",
			"    graph = {}\r",
			"    rows = len(maze)\r",
			"    cols = len(maze[0])\r",
			"    for i in range(rows):\r",
			"        for j in range(cols):\r",
			"            if maze[i][j] == 1:  # If it's an open path\r",
			"                neighbors = []\r",
			"                for dx, dy in directions:\r",
			"                    nx, ny = i + dx, j + dy\r",
			"                    if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1:\r",
			"                        neighbors.append((nx, ny))\r",
			"                graph[(i, j)] = neighbors\r",
			"    return graph\r",
			"\r",
			"# BFS Function using queue\r",
			"def bfs(graph, start, goal):\r",
			"    visited = []  # List for visited nodes\r",
			"    queue = []  # Initialize queue\r",
			"    visited.append(start)\r",
			"    queue.append(start)\r",
			"    while queue:\r",
			"        node = queue.pop(0)  # FIFO: Dequeue from front\r",
			"        print(node, end=\" \")\r",
			"        if node == goal:  # Stop if goal is found\r",
			"            print(\"\\nGoal found!\")\r",
			"            break\r",
			"\r",
			"        for neighbour in graph[node]:  # Visit neighbors\r",
			"            if neighbour not in visited:\r",
			"                visited.append(neighbour)\r",
			"                queue.append(neighbour)\r",
			"\r",
			"# Create graph from maze\r",
			"graph = create_graph(maze)\r",
			"# Define Start and Goal nodes\r",
			"start_node = (0, 0)  # Starting point (0,0)\r",
			"goal_node = (2, 2)  # Goal point (2,2)\r",
			"# Run BFS\r",
			"print(\"\\nFollowing is the Breadth-First Search (BFS):\")\r",
			"bfs(graph, start_node, goal_node)\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			"\r",
			""
		],
		"description": "description for mazebfs"
	},
	"mazebestfs": {
		"prefix": "mazebestfs",
		"body": [
			"from queue import PriorityQueue\r",
			"\r",
			"\r",
			"class Node:\r",
			"    def __init__(self, position, parent=None):\r",
			"        self.positioAn = position\r",
			"        self.parent = parent\r",
			"        self.g = 0  # cost from start node to current node\r",
			"        self.h = 0  # heuristic estimate of the cost from current node to end node\r",
			"        self.f = 0  # total cost\r",
			"\r",
			"    def __lt__(self, other):\r",
			"        return self.f < other.f\r",
			"\r",
			"\r",
			"def heuristic(current_pos, end_pos):\r",
			"    # Manhattan distance heuristic\r",
			"    return abs(current_pos[0] - end_pos[0]) + abs(current_pos[1] - end_pos[1])\r",
			"\r",
			"\r",
			"def best_first_search(maze, start, end):\r",
			"    rows, cols = len(maze), len(maze[0])\r",
			"    start_node = Node(start)\r",
			"    end_node = Node(end)\r",
			"    frontier = PriorityQueue()\r",
			"    frontier.put(start_node)\r",
			"    visited = set()\r",
			"\r",
			"    while not frontier.empty():\r",
			"        current_node = frontier.get()\r",
			"        current_pos = current_node.position\r",
			"\r",
			"        if current_pos == end:\r",
			"            path = []\r",
			"            while current_node:\r",
			"                path.append(current_node.position)\r",
			"                current_node = current_node.parent\r",
			"            return path[::-1]  # Reverse the path to start from the start position\r",
			"\r",
			"        visited.add(current_pos)\r",
			"\r",
			"        # Generate adjacent nodes\r",
			"        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\r",
			"            new_pos = (current_pos[0] + dx, current_pos[1] + dy)\r",
			"            if 0 <= new_pos[0] < rows and 0 <= new_pos[1] < cols and \\\r",
			"                    maze[new_pos[0]][new_pos[1]] == 0 and new_pos not in visited:\r",
			"                new_node = Node(new_pos, current_node)\r",
			"                new_node.g = current_node.g + 1\r",
			"                new_node.h = heuristic(new_pos, end)\r",
			"                new_node.f = new_node.h  # Best-First Search: f(n) = h(n)\r",
			"                frontier.put(new_node)\r",
			"                visited.add(new_pos)\r",
			"\r",
			"\r",
			"    return None\r",
			"\r",
			"\r",
			"# Example maze\r",
			"maze = [\r",
			"    [0, 0, 1, 0, 0],\r",
			"    [0, 0, 0, 0, 0],\r",
			"    [0, 0, 1, 0, 1],\r",
			"    [0, 0, 1, 0, 0],\r",
			"    [0, 0, 0, 1, 0]\r",
			"]\r",
			"start = (0, 0)\r",
			"end = (4, 4)\r",
			"path = best_first_search(maze, start, end)\r",
			"if path:\r",
			"    print(\"Path found:\", path)\r",
			"else:\r",
			"    print(\"No path found.\")"
		],
		"description": "description for mazebestfs"
	},
	"bestfs": {
		"prefix": "bestfs",
		"body": [
			"from queue import PriorityQueue\r",
			"\r",
			"class GoalBasedAgent:\r",
			"    def __init__(self):\r",
			"        self.start = 'A'\r",
			"        self.goal = 'F'\r",
			"        self.graph = {\r",
			"            'A': [('B', 5), ('C', 8)],\r",
			"            'B': [('D', 10)],\r",
			"            'C': [('E', 3)],\r",
			"            'D': [('F', 7)],\r",
			"            'E': [('F', 2)],\r",
			"            'F': []\r",
			"        }\r",
			"        self.visited = set()\r",
			"\r",
			"    def best_first_search(self):\r",
			"        pq = PriorityQueue()\r",
			"        pq.put((0, self.start))\r",
			"        came_from = {self.start: None}\r",
			"\r",
			"        while not pq.empty():\r",
			"            _, current_node = pq.get()\r",
			"\r",
			"            if current_node == self.goal:\r",
			"                path = []\r",
			"                while current_node is not None:\r",
			"                    path.append(current_node)\r",
			"                    current_node = came_from[current_node]\r",
			"                path.reverse()\r",
			"                return path\r",
			"\r",
			"            self.visited.add(current_node)\r",
			"\r",
			"            for neighbor, weight in self.graph[current_node]:\r",
			"                if neighbor not in self.visited:\r",
			"                    pq.put((weight, neighbor))\r",
			"                    came_from[neighbor] = current_node\r",
			"        return None\r",
			"\r",
			"agent = GoalBasedAgent()\r",
			"\r",
			"path = agent.best_first_search()\r",
			"\r",
			"if path:\r",
			"    print(\"Path found:\", path)\r",
			"else:\r",
			"    print(\"No path found\")\r",
			"\r",
			"\r",
			"\r",
			""
		],
		"description": "description for bestfs"
	},
	"astar": {
		"prefix": "astar",
		"body": [
			"from queue import PriorityQueue\r",
			"\r",
			"class AStarAgent:\r",
			"    def __init__(self):\r",
			"        self.start = 'A'\r",
			"        self.goal = 'F'\r",
			"        self.graph = {\r",
			"            'A': [('B', 5), ('C', 8)],\r",
			"            'B': [('D', 10)],\r",
			"            'C': [('E', 3)],\r",
			"            'D': [('F', 7)],\r",
			"            'E': [('F', 2)],\r",
			"            'F': []\r",
			"        }\r",
			"        self.heuristic = {\r",
			"            'A': 10,\r",
			"            'B': 7,\r",
			"            'C': 6,\r",
			"            'D': 4,\r",
			"            'E': 3,\r",
			"            'F': 0\r",
			"        }\r",
			"        self.visited = set()\r",
			"\r",
			"    def a_star_search(self):\r",
			"        pq = PriorityQueue()\r",
			"        pq.put((0 + self.heuristic[self.start], 0, self.start))\r",
			"\r",
			"        came_from = {self.start: None}\r",
			"        g_score = {self.start: 0}\r",
			"\r",
			"        while not pq.empty():\r",
			"            _, current_g, current_node = pq.get()\r",
			"\r",
			"            if current_node == self.goal:\r",
			"                path = []\r",
			"                while current_node is not None:\r",
			"                    path.append(current_node)\r",
			"                    current_node = came_from[current_node]\r",
			"                path.reverse()\r",
			"                return path\r",
			"\r",
			"            self.visited.add(current_node)\r",
			"\r",
			"            for neighbor, weight in self.graph[current_node]:\r",
			"                tentative_g_score = current_g + weight\r",
			"                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:\r",
			"                    g_score[neighbor] = tentative_g_score\r",
			"                    f_score = tentative_g_score + self.heuristic[neighbor]\r",
			"                    pq.put((f_score, tentative_g_score, neighbor))\r",
			"                    came_from[neighbor] = current_node\r",
			"\r",
			"        return None\r",
			"\r",
			"agent = AStarAgent()\r",
			"\r",
			"path = agent.a_star_search()\r",
			"\r",
			"if path:\r",
			"    print(\"Path found:\", path)\r",
			"else:\r",
			"    print(\"No path found\")\r",
			"\r",
			"\r",
			""
		],
		"description": "description for astar"
	},
	"gbfs": {
		"prefix": "gbfs",
		"body": [
			"from queue import PriorityQueue\r",
			"\r",
			"class GreedyBestFirstSearchAgent:\r",
			"    def __init__(self, start, goal, graph, heuristic):\r",
			"        self.start = start\r",
			"        self.goal = goal\r",
			"        self.graph = graph\r",
			"        self.heuristic = heuristic\r",
			"        self.visited = set()\r",
			"\r",
			"    def greedy_best_first_search(self):\r",
			"        pq = PriorityQueue()\r",
			"        pq.put((self.heuristic[self.start], self.start))\r",
			"\r",
			"        came_from = {self.start: None}\r",
			"\r",
			"        while not pq.empty():\r",
			"            current_h, current_node = pq.get()\r",
			"\r",
			"\r",
			"            if current_node == self.goal:\r",
			"                path = []\r",
			"                while current_node is not None:\r",
			"                    path.append(current_node)\r",
			"                    current_node = came_from[current_node]\r",
			"                path.reverse()\r",
			"                return path\r",
			"\r",
			"            self.visited.add(current_node)\r",
			"\r",
			"            for neighbor, _ in self.graph[current_node]:\r",
			"                if neighbor not in self.visited:\r",
			"                    pq.put((self.heuristic[neighbor], neighbor))\r",
			"                    came_from[neighbor] = current_node\r",
			"\r",
			"        return None\r",
			"\r",
			"graph = {\r",
			"    'A': [('B', 5), ('C', 8)],\r",
			"    'B': [('D', 10)],\r",
			"    'C': [('E', 3)],\r",
			"    'D': [('F', 7)],\r",
			"    'E': [('F', 2)],\r",
			"    'F': []\r",
			"}\r",
			"\r",
			"heuristic = {\r",
			"    'A': 10,\r",
			"    'B': 7,\r",
			"    'C': 6,\r",
			"    'D': 4,\r",
			"    'E': 3,\r",
			"    'F': 0\r",
			"}\r",
			"\r",
			"agent = GreedyBestFirstSearchAgent(start='A', goal='F', graph=graph, heuristic=heuristic)\r",
			"\r",
			"path = agent.greedy_best_first_search()\r",
			"\r",
			"if path:\r",
			"    print(\"Path found:\", path)\r",
			"    print(\"Good Job Greedy Agent\")\r",
			"else:\r",
			"    print(\"No path found\")\r",
			"\r",
			""
		],
		"description": "description for gbfs"
	},
	"hill": {
		"prefix": "hill",
		"body": [
			"import random\r",
			"\r",
			"# Heuristic function: Counts the number of pairs of attacking queens\r",
			"def calculate_conflicts(state):\r",
			"    print(state)\r",
			"    conflicts = 0\r",
			"    n = len(state)\r",
			"    for i in range(n):\r",
			"        for j in range(i + 1, n):\r",
			"            # Check same column or diagonal\r",
			"            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):\r",
			"                conflicts += 1\r",
			"    return conflicts\r",
			"\r",
			"# Generate neighbors by moving one queen at a time\r",
			"def get_neighbors(state):\r",
			"    neighbors = []\r",
			"    n = len(state)\r",
			"    for row in range(n):\r",
			"        for col in range(n):\r",
			"            if col != state[row]:\r",
			"                new_state = list(state)\r",
			"                new_state[row] = col\r",
			"                neighbors.append(new_state)\r",
			"    return neighbors\r",
			"\r",
			"# Simple Hill Climbing function\r",
			"def simple_hill_climbing(n):\r",
			"    # Random initial state\r",
			"    current_state = [random.randint(0, n - 1) for _ in range(n)]\r",
			"    current_conflicts = calculate_conflicts(current_state)\r",
			"    while True:\r",
			"        neighbors = get_neighbors(current_state)\r",
			"        next_state = None\r",
			"        next_conflicts = current_conflicts\r",
			"        # Find the first better neighbor\r",
			"        for neighbor in neighbors:\r",
			"            neighbor_conflicts = calculate_conflicts(neighbor)\r",
			"            if neighbor_conflicts < next_conflicts:\r",
			"                next_state = neighbor\r",
			"                next_conflicts = neighbor_conflicts\r",
			"                break  # Move to the first better neighbor\r",
			"        # If no better neighbor is found, return the current state\r",
			"        if next_conflicts >= current_conflicts:\r",
			"            break\r",
			"        # Move to the better neighbor\r",
			"        current_state = next_state\r",
			"        current_conflicts = next_conflicts\r",
			"\r",
			"    return current_state, current_conflicts\r",
			"\r",
			"# Run Simple Hill Climbing for N-Queens\r",
			"n = 8  # Change N here for different sizes\r",
			"solution, conflicts = simple_hill_climbing(4)\r",
			"\r",
			"# Print results\r",
			"if conflicts == 0:\r",
			"    print(f\"Solution found for {n}-Queens problem:\")\r",
			"    print(solution)\r",
			"else:\r",
			"    print(f\"Could not find a solution. Stuck at state with {conflicts} conflicts:\")\r",
			"    print(solution)"
		],
		"description": "description for hill"
	},
	"beam": {
		"prefix": "beam",
		"body": [
			"import heapq\r",
			"\r",
			"graph = {\r",
			"    'S': [('A', 3), ('B', 6), ('C', 5)],\r",
			"    'A': [('D', 9), ('E', 8)],\r",
			"    'B': [('F', 12), ('G', 14)],\r",
			"    'C': [('H', 7)],\r",
			"    'H': [('I', 5), ('J', 6)],\r",
			"    'I': [('K', 1), ('L', 10), ('M', 2)],\r",
			"    'D': [], 'E': [],\r",
			"    'F': [], 'G': [],\r",
			"    'J': [], 'K': [],\r",
			"    'L': [], 'M': []\r",
			"}\r",
			"\r",
			"# Beam Search function\r",
			"def beam_search(start, goal, beam_width=2):\r",
			"    # Initialize the beam with the start state\r",
			"    beam = [(0, [start])]  # (cumulative cost, path)\r",
			"    while beam:\r",
			"        candidates = []\r",
			"        # Expand each path in the beam\r",
			"        for cost, path in beam:\r",
			"            current_node = path[-1]\r",
			"            if current_node == goal:\r",
			"                return path, cost  # Return the path and cost if goal is reached\r",
			"            # Generate successors\r",
			"            for neighbor, edge_cost in graph.get(current_node, []):\r",
			"                new_cost = cost + edge_cost\r",
			"                new_path = path + [neighbor]\r",
			"                candidates.append((new_cost, new_path))\r",
			"\r",
			"        beam = heapq.nsmallest(beam_width, candidates, key=lambda x: x[0])\r",
			"        # print(beam)\r",
			"    return None, float('inf')  # Return None if no path is found\r",
			"\r",
			"# Run Beam Search\r",
			"start_node = 'S'\r",
			"goal_node = 'L'\r",
			"beam_width = 3\r",
			"path, cost = beam_search(start=start_node, goal=goal_node, beam_width=beam_width)\r",
			"\r",
			"# Print results\r",
			"if path:\r",
			"    print(f\"Path found: {' → '.join(path)} with total cost: {cost}\")\r",
			"else:\r",
			"    print(\"No path found.\")"
		],
		"description": "description for beam"
	},
	"genetic": {
		"prefix": "genetic",
		"body": [
			"    import random\r",
			"\r",
			"n = 8  # Assuming n = 8 for 8-Queens problem (you can change this)\r",
			"\r",
			"# Fitness function: counts non-attacking pairs of queens\r",
			"def calculate_fitness(individual):\r",
			"    non_attacking_pairs = 0\r",
			"    total_pairs = n * (n - 1) // 2  # Maximum possible non-attacking pairs\r",
			"    # Check for conflicts\r",
			"    for i in range(n):\r",
			"        for j in range(i + 1, n):\r",
			"            # No same column or diagonal conflict\r",
			"            if individual[i] != individual[j] and abs(individual[i] - individual[j]) != abs(i - j):\r",
			"                non_attacking_pairs += 1\r",
			"    # Fitness score is the ratio of non-attacking pairs\r",
			"    return non_attacking_pairs / total_pairs\r",
			"\r",
			"# Generate a random individual (chromosome) based on column positions\r",
			"def create_random_individual():\r",
			"    return random.sample(range(n), n)  # Ensure unique column positions\r",
			"\r",
			"# Create an initial population of random individuals\r",
			"population_size = 10\r",
			"population = [create_random_individual() for _ in range(population_size)]\r",
			"\r",
			"# Evaluate fitness for each route in the population\r",
			"fitness_scores = [calculate_fitness(individual) for individual in population]\r",
			"print(\"Fitness Scores:\", fitness_scores)\r",
			"\r",
			"# Select the best routes (parents) based on fitness\r",
			"def select_parents(population, fitness_scores):\r",
			"    # Select top 50% of the population\r",
			"    sorted_population = [board for _, board in sorted(zip(fitness_scores, population), reverse=True)]\r",
			"    return sorted_population[:len(population) // 2]\r",
			"\r",
			"parents = select_parents(population, fitness_scores)\r",
			"print(\"Selected Parents:\", parents)\r",
			"\r",
			"# Crossover function: single-point crossover with unique column\r",
			"def crossover(parent1, parent2):\r",
			"    point = random.randint(1, n - 2)  # Choose a crossover point\r",
			"    child = parent1[:point] + parent2[point:]\r",
			"    # Ensure unique column positions\r",
			"    missing = set(range(n)) - set(child)\r",
			"    duplicates = [col for col in child if child.count(col) > 1]\r",
			"    for i in range(len(child)):\r",
			"        if child.count(child[i]) > 1:\r",
			"            child[i] = missing.pop()\r",
			"    return child\r",
			"\r",
			"# Create new population using crossover\r",
			"new_population = []\r",
			"for i in range(population_size):\r",
			"    parent1, parent2 = random.sample(parents, 2)\r",
			"    child = crossover(parent1, parent2)\r",
			"    new_population.append(child)\r",
			"print(\"New Population after Crossover:\", new_population)\r",
			"\r",
			"# Randomly swap two locations in a route\r",
			"def mutate(route):\r",
			"    idx1, idx2 = random.sample(range(n), 2)\r",
			"    route[idx1], route[idx2] = route[idx2], route[idx1]\r",
			"    return route\r",
			"\r",
			"mutation_rate = 0.1\r",
			"for i in range(len(new_population)):\r",
			"    if random.random() < mutation_rate:\r",
			"        new_population[i] = mutate(new_population[i])\r",
			"print(\"Population after Mutation:\", new_population)\r",
			"\r",
			"# Genetic Algorithm main function\r",
			"def genetic_algorithm():\r",
			"    population = [create_random_individual() for _ in range(population_size)]\r",
			"    generation = 0\r",
			"    best_fitness = 0\r",
			"    while best_fitness < 1.0 and generation < 100:\r",
			"        fitness_scores = [calculate_fitness(ind) for ind in population]\r",
			"        best_fitness = max(fitness_scores)\r",
			"        print(f\"Generation {generation} Best Fitness: {best_fitness}\")\r",
			"        # Check for optimal solution\r",
			"        if best_fitness == 1.0:\r",
			"            break\r",
			"        # Selection\r",
			"        parents = select_parents(population, fitness_scores)\r",
			"        # Crossover\r",
			"        new_population = [crossover(random.choice(parents), random.choice(parents)) for _ in range(population_size)]\r",
			"        # Mutation\r",
			"        for i in range(len(new_population)):\r",
			"            if random.random() < mutation_rate:\r",
			"                new_population[i] = mutate(new_population[i])\r",
			"        population = new_population\r",
			"        generation += 1\r",
			"    # Return the best solution\r",
			"    best_individual = max(population, key=calculate_fitness)\r",
			"    return best_individual, calculate_fitness(best_individual)\r",
			"\r",
			"# Run the Genetic Algorithm\r",
			"solution, fitness = genetic_algorithm()\r",
			"print(\"Best Solution:\", solution)\r",
			"print(\"Best Fitness:\", fitness)"
		],
		"description": "description for genetic"
	},
	"hilltsp": {
		"prefix": "hilltsp",
		"body": [
			"import random\r",
			"import math\r",
			"\r",
			"# Generate random delivery points (x, y coordinates)\r",
			"num_locations = 10\r",
			"locations = [(random.randint(0, 100), random.randint(0, 100)) for _ in range(num_locations)]\r",
			"\r",
			"def distance(a, b):\r",
			"    \"\"\"Calculate Euclidean distance\"\"\"\r",
			"    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\r",
			"\r",
			"def total_distance(route):\r",
			"    \"\"\"Calculate total distance of a route\"\"\"\r",
			"    return sum(distance(route[i], route[i + 1]) for i in range(len(route) - 1))\r",
			"\r",
			"def get_neighbors(route):\r",
			"    \"\"\"Generate neighboring routes by swapping two locations\"\"\"\r",
			"    neighbors = []\r",
			"    for i in range(len(route)):\r",
			"        for j in range(i + 1, len(route)):\r",
			"            neighbor = route[:]\r",
			"            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]  # Swap two locations\r",
			"            neighbors.append(neighbor)\r",
			"    return neighbors\r",
			"\r",
			"def hill_climb_tsp(route):\r",
			"    \"\"\"Hill climbing for TSP\"\"\"\r",
			"    current_route = route[:]\r",
			"    current_distance = total_distance(current_route)\r",
			"\r",
			"    while True:\r",
			"        neighbors = get_neighbors(current_route)\r",
			"        best_neighbor = min(neighbors, key=total_distance)\r",
			"        best_neighbor_distance = total_distance(best_neighbor)\r",
			"\r",
			"        if best_neighbor_distance >= current_distance:\r",
			"            break  # No improvement, stop climbing\r",
			"\r",
			"        current_route, current_distance = best_neighbor, best_neighbor_distance\r",
			"\r",
			"    return current_route, current_distance\r",
			"\r",
			"# Run hill climbing for shortest delivery route\r",
			"initial_route = random.sample(locations, len(locations))\r",
			"optimized_route, min_distance = hill_climb_tsp(initial_route)\r",
			"\r",
			"print(\"Optimized Route:\", optimized_route)\r",
			"print(\"Total Distance:\", min_distance)\r",
			""
		],
		"description": "description for hilltsp"
	},
	"genetictsp": {
		"prefix": "genetictsp",
		"body": [
			"import random\r",
			"\r",
			"num_cities = 10\r",
			"cities = [(random.randint(0, 100), random.randint(0, 100)) for _ in range(num_cities)]\r",
			"\r",
			"def distance(a, b):\r",
			"    \"\"\"Calculate Euclidean distance\"\"\"\r",
			"    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\r",
			"\r",
			"def total_distance(route):\r",
			"    \"\"\"Calculate total distance of a route\"\"\"\r",
			"    return sum(distance(route[i], route[i + 1]) for i in range(len(route) - 1))\r",
			"\r",
			"def create_random_route():\r",
			"    \"\"\"Generate a random route\"\"\"\r",
			"    return random.sample(cities, len(cities))\r",
			"\r",
			"def select_parents(population):\r",
			"    \"\"\"Select top 50% of population based on fitness (shortest distance)\"\"\"\r",
			"    population.sort(key=total_distance)\r",
			"    return population[:len(population) // 2]\r",
			"\r",
			"def crossover(parent1, parent2):\r",
			"    \"\"\"Order Crossover for TSP\"\"\"\r",
			"    point1, point2 = sorted(random.sample(range(num_cities), 2))\r",
			"    child = [None] * num_cities\r",
			"    child[point1:point2] = parent1[point1:point2]\r",
			"\r",
			"    parent2_filtered = [city for city in parent2 if city not in child]\r",
			"    child = [city if city is not None else parent2_filtered.pop(0) for city in child]\r",
			"\r",
			"    return child\r",
			"\r",
			"def mutate(route):\r",
			"    \"\"\"Swap mutation\"\"\"\r",
			"    i, j = random.sample(range(num_cities), 2)\r",
			"    route[i], route[j] = route[j], route[i]\r",
			"    return route\r",
			"\r",
			"def genetic_algorithm():\r",
			"    \"\"\"Genetic Algorithm for TSP\"\"\"\r",
			"    population = [create_random_route() for _ in range(10)]\r",
			"    generations = 100\r",
			"\r",
			"    for _ in range(generations):\r",
			"        parents = select_parents(population)\r",
			"        new_population = [crossover(random.choice(parents), random.choice(parents)) for _ in range(len(population))]\r",
			"\r",
			"        # Apply mutation with a small probability\r",
			"        for i in range(len(new_population)):\r",
			"            if random.random() < 0.1:\r",
			"                new_population[i] = mutate(new_population[i])\r",
			"\r",
			"        population = new_population\r",
			"\r",
			"    best_route = min(population, key=total_distance)\r",
			"    return best_route, total_distance(best_route)\r",
			"\r",
			"# Run genetic algorithm for TSP\r",
			"best_route, best_distance = genetic_algorithm()\r",
			"print(\"Best Route:\", best_route)\r",
			"print(\"Shortest Distance:\", best_distance)"
		],
		"description": "description for genetictsp"
	}
}
